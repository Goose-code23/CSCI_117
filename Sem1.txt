// Run this program through the Oz interpreter by calling
//    runFull "declarative" "Sem1.txt" "Sem1.out"
// Explain the resulting store

local X in
  local Y in
    X = 1
    Y = pair(1:X 2:X)
    case Y of pair(1:Z 2:W) then 
      local S in 
        {IntPlus Z W S}
        skip Full
      end
      else
        skip Basic
    end
  end
end

//Store : ((15, 12), 2), 
//((14, 13, 11, 10, 8), 1), 
//((9), pair(1:10 2:11)), 
//((1), Primitive Operation), 
//((2), Primitive Operation), 
//((3), Primitive Operation), 
//((4), Primitive Operation), 
//((5), Primitive Operation), 
//((6), Primitive Operation), 
//((7), Primitive Operation)

//Mutable Store: Empty
//Current Environment : ("S" -> 12, "Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2,"Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)
//Stack : ""

// the enviroment program sets up the primitive operations and then adds them to environment 
//These are the primitive Operations 
//Environment : ("IntMinus" -> 2,"Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

// the local x and y create the variable x and y and then add them to the environment 
//Environment: ( "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

//then case y of pair (1:Z 2:W) created varible Z and W and then adds them to the environment 
// Environment: ("Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

// eventually "local S in.." created variable S, and then add them to environment
// Environment : ("S" -> 12, "Z" -> 10, "W" -> 11, "Y" -> 9, "X" -> 8, "IntPlus" -> 1, "IntMinus" -> 2, "Eq" -> 3, "GT" -> 4, "LT" -> 5, "Mod" -> 6, "IntMultiply" -> 7)

// The whole program does assign an variable x = 1, and then assign another variable y to a pair, y=(1,1)
// and then sum the first element and the second element of this pair, finally assigns the result to a variable S.
// S will be 2 (first + second = 1 + 1).

// After "local X in ..." executed, we have "X" -> ((8),unbound)

// After "local Y in ..." executed, we have "Y" -> ((9),unbound)

// After "X=1" executed, we have "X" -> ((8),1)

// After "Y = pair(1:X 2:X)" executed, we have "Y" -> ((9), pair (1:10,2:11))
// We also have "pair.1" -> ((10),1), "pair.2" -> ((11),1), "X" -> ((11,10,8),1)

// After "case Y of pair(1:Z 2:W) then" executed, we have
// due to Z and W are not local variables, so instead of creating a new store location for them , we only assign the values to them. 
// the Z and W is actually the "pair.1" and "pair.2" in "Y" -> ((9), pair (1:10, 2:11)),so we have "Z" -> ((10),1) "W" -> ((11),1). 

// After "local S in {IntPlus Z W S}" executed, we have
// local S created a variable S first, and assigned it a store location, "S" -> ((12),unbound)
// then "IntPlus Z W S" simply operater two arguments and save the result in S
// "IntPlus Z W S" actually does S= Z IntPlus W, for those Z, W, and S, program created new store location for them.
// so we have "Z" -> ((13),1), "W" -> ((14),1), "S" -> ((15,12),unbound)
// Thus S= Z "+" W = 1 + 1 = 2, "S" -> ((15,12),2)
// and we also have "X" -> ((14,13,11,10,8),1)